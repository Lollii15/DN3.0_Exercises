Exercise-1
Scenario 1: Apply Discount to Loan Interest Rates for Customers Above 60 Years Old
sql
DECLARE
    CURSOR customer_cursor IS
        SELECT customer_id, age, loan_interest_rate
        FROM customers;
    v_customer_id customers.customer_id%TYPE;
    v_age customers.age%TYPE;
    v_loan_interest_rate customers.loan_interest_rate%TYPE;
BEGIN
    OPEN customer_cursor;
    LOOP
        FETCH customer_cursor INTO v_customer_id, v_age, v_loan_interest_rate;
        EXIT WHEN customer_cursor%NOTFOUND;
        
        IF v_age > 60 THEN
            UPDATE customers
            SET loan_interest_rate = v_loan_interest_rate - 1
            WHERE customer_id = v_customer_id;
        END IF;
    END LOOP;
    CLOSE customer_cursor;
    COMMIT;
END;
/
Scenario 2: Set IsVIP Flag for Customers with Balance Over $10,000
DECLARE
    CURSOR customer_cursor IS
        SELECT customer_id, balance
        FROM customers;
    v_customer_id customers.customer_id%TYPE;
    v_balance customers.balance%TYPE;
BEGIN
    OPEN customer_cursor;
    LOOP
        FETCH customer_cursor INTO v_customer_id, v_balance;
        EXIT WHEN customer_cursor%NOTFOUND;
        
        IF v_balance > 10000 THEN
            UPDATE customers
            SET IsVIP = TRUE
            WHERE customer_id = v_customer_id;
        END IF;
    END LOOP;
    CLOSE customer_cursor;
    COMMIT;
END;
/
Scenario 3: Send Reminders for Loans Due Within the Next 30 Days
DECLARE
    CURSOR loan_cursor IS
        SELECT l.loan_id, l.due_date, c.customer_id, c.name
        FROM loans l
        JOIN customers c ON l.customer_id = c.customer_id
        WHERE l.due_date BETWEEN SYSDATE AND SYSDATE + 30;
    v_loan_id loans.loan_id%TYPE;
    v_due_date loans.due_date%TYPE;
    v_customer_id customers.customer_id%TYPE;
    v_customer_name customers.name%TYPE;
BEGIN
    OPEN loan_cursor;
    LOOP
        FETCH loan_cursor INTO v_loan_id, v_due_date, v_customer_id, v_customer_name;
        EXIT WHEN loan_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Reminder: Dear ' || v_customer_name || ', your loan (ID: ' || v_loan_id || ') is due on ' || v_due_date || '.');
    END LOOP;
    CLOSE loan_cursor;
END;
/
These PL/SQL blocks accomplish the tasks described in the scenarios by looping through the relevant customer or loan records, applying the necessary conditions, and performing updates or printing messages accordingly.

Exercise 2: Error Handling
Scenario 1: Safe Transfer Funds
CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    insufficient_funds EXCEPTION;
    insufficient_funds_msg VARCHAR2(100);
BEGIN
    -- Check if the from_account has sufficient funds
    DECLARE
        v_balance NUMBER;
    BEGIN
        SELECT balance INTO v_balance
        FROM accounts
        WHERE account_id = p_from_account_id;
        
        IF v_balance < p_amount THEN
            RAISE insufficient_funds;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Account ID ' || p_from_account_id || ' does not exist.');
            RETURN;
        WHEN insufficient_funds THEN
            insufficient_funds_msg := 'Insufficient funds in account ID ' || p_from_account_id;
            DBMS_OUTPUT.PUT_LINE(insufficient_funds_msg);
            RETURN;
    END;
    
    -- Perform the transfer
    BEGIN
        UPDATE accounts
        SET balance = balance - p_amount
        WHERE account_id = p_from_account_id;
        
        UPDATE accounts
        SET balance = balance + p_amount
        WHERE account_id = p_to_account_id;
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error during fund transfer: ' || SQLERRM);
    END;
END;
/
Scenario 2: Update Employee Salary
CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employee_id IN NUMBER,
    p_percentage IN NUMBER
) IS
    v_salary employees.salary%TYPE;
BEGIN
    -- Attempt to update the salary
    BEGIN
        SELECT salary INTO v_salary
        FROM employees
        WHERE employee_id = p_employee_id
        FOR UPDATE;
        
        UPDATE employees
        SET salary = salary * (1 + p_percentage / 100)
        WHERE employee_id = p_employee_id;
        
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Employee ID ' || p_employee_id || ' does not exist.');
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error during salary update: ' || SQLERRM);
    END;
END;
/
Scenario 3: Add New Custome
CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customer_id IN NUMBER,
    p_name IN VARCHAR2,
    p_age IN NUMBER,
    p_balance IN NUMBER
) IS
    customer_exists EXCEPTION;
BEGIN
    -- Check if the customer already exists
    DECLARE
        v_temp NUMBER;
    BEGIN
        SELECT 1 INTO v_temp
        FROM customers
        WHERE customer_id = p_customer_id;
        
        RAISE customer_exists;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL; -- Proceed with insertion
        WHEN customer_exists THEN
            DBMS_OUTPUT.PUT_LINE('Customer with ID ' || p_customer_id || ' already exists.');
            RETURN;
    END;
    
    -- Insert the new customer
    BEGIN
        INSERT INTO customers (customer_id, name, age, balance)
        VALUES (p_customer_id, p_name, p_age, p_balance);
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error during customer insertion: ' || SQLERRM);
    END;
END;
/
These stored procedures handle errors gracefully, ensuring that appropriate actions are taken, such as logging error messages and rolling back transactions to maintain data integrity.

Exercise 3: Stored Procedures
Scenario 1: Process Monthly Interest

CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
    v_account_id accounts.account_id%TYPE;
    v_balance accounts.balance%TYPE;
    v_interest_rate CONSTANT NUMBER := 0.01;
BEGIN
    FOR account_record IN (SELECT account_id, balance FROM accounts WHERE account_type = 'SAVINGS') LOOP
        v_account_id := account_record.account_id;
        v_balance := account_record.balance;
        
        -- Calculate the new balance with interest
        v_balance := v_balance * (1 + v_interest_rate);
        
        -- Update the account balance
        UPDATE accounts
        SET balance = v_balance
        WHERE account_id = v_account_id;
    END LOOP;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error processing monthly interest: ' || SQLERRM);
END;
/
Scenario 2: Update Employee Bonus

CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(
    p_department_id IN NUMBER,
    p_bonus_percentage IN NUMBER
) IS
    v_employee_id employees.employee_id%TYPE;
    v_salary employees.salary%TYPE;
BEGIN
    FOR employee_record IN (SELECT employee_id, salary FROM employees WHERE department_id = p_department_id) LOOP
        v_employee_id := employee_record.employee_id;
        v_salary := employee_record.salary;
        
        -- Calculate the new salary with bonus
        v_salary := v_salary * (1 + p_bonus_percentage / 100);
        
        -- Update the employee's salary
        UPDATE employees
        SET salary = v_salary
        WHERE employee_id = v_employee_id;
    END LOOP;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error updating employee bonuses: ' || SQLERRM);
END;
/
Scenario 3: Transfer Funds
CREATE OR REPLACE PROCEDURE TransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    v_from_balance accounts.balance%TYPE;
    v_to_balance accounts.balance%TYPE;
BEGIN
    -- Check if the from_account has sufficient funds
    BEGIN
        SELECT balance INTO v_from_balance
        FROM accounts
        WHERE account_id = p_from_account_id
        FOR UPDATE;
        
        IF v_from_balance < p_amount THEN
            DBMS_OUTPUT.PUT_LINE('Insufficient funds in account ID ' || p_from_account_id);
            RETURN;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('From account ID ' || p_from_account_id || ' does not exist.');
            RETURN;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error checking from account: ' || SQLERRM);
            RETURN;
    END;
    
    -- Perform the transfer
    BEGIN
        -- Deduct from the source account
        UPDATE accounts
        SET balance = balance - p_amount
        WHERE account_id = p_from_account_id;
        
        -- Add to the destination account
        UPDATE accounts
        SET balance = balance + p_amount
        WHERE account_id = p_to_account_id;
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error during fund transfer: ' || SQLERRM);
    END;
END;
/
These stored procedures handle the given scenarios by performing the required operations and ensuring that any errors are managed properly, either by logging messages or rolling back transactions to maintain data integrity.


Exercise 4: Functions


Scenario 1: Calculate Age

CREATE OR REPLACE FUNCTION CalculateAge(
    p_date_of_birth DATE
) RETURN NUMBER IS
    v_age NUMBER;
BEGIN
    v_age := TRUNC((SYSDATE - p_date_of_birth) / 365.25);
    RETURN v_age;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error calculating age: ' || SQLERRM);
        RETURN NULL;
END;
/
Scenario 2: Calculate Monthly Installment

CREATE OR REPLACE FUNCTION CalculateMonthlyInstallment(
    p_loan_amount NUMBER,
    p_interest_rate NUMBER,
    p_loan_duration_years NUMBER
) RETURN NUMBER IS
    v_monthly_rate NUMBER;
    v_number_of_payments NUMBER;
    v_monthly_installment NUMBER;
BEGIN
    v_monthly_rate := p_interest_rate / 12 / 100;
    v_number_of_payments := p_loan_duration_years * 12;
    
    IF v_monthly_rate > 0 THEN
        v_monthly_installment := p_loan_amount * v_monthly_rate / (1 - POWER(1 + v_monthly_rate, -v_number_of_payments));
    ELSE
        v_monthly_installment := p_loan_amount / v_number_of_payments;
    END IF;
    
    RETURN v_monthly_installment;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error calculating monthly installment: ' || SQLERRM);
        RETURN NULL;
END;
/
Scenario 3: Has Sufficient Balance

CREATE OR REPLACE FUNCTION HasSufficientBalance(
    p_account_id NUMBER,
    p_amount NUMBER
) RETURN BOOLEAN IS
    v_balance NUMBER;
BEGIN
    SELECT balance INTO v_balance
    FROM accounts
    WHERE account_id = p_account_id;
    
    IF v_balance >= p_amount THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Account ID ' || p_account_id || ' does not exist.');
        RETURN FALSE;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error checking balance: ' || SQLERRM);
        RETURN FALSE;
END;
/
These functions provide the necessary calculations and checks for the given scenarios. They include error handling to manage any exceptions that might occur during their execution.

Exercise 5: Triggers

Scenario 1: Update Last Modified Date

CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;
/
Scenario 2: Maintain an Audit Log for Transactions

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (transaction_id, account_id, transaction_type, amount, transaction_date)
    VALUES (:NEW.transaction_id, :NEW.account_id, :NEW.transaction_type, :NEW.amount, :NEW.transaction_date);
END;
/
Scenario 3: Enforce Business Rules on Deposits and Withdrawals

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    -- Check that deposits are positive
    IF :NEW.transaction_type = 'DEPOSIT' AND :NEW.amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Deposit amount must be positive.');
    END IF;
    
    -- Check that withdrawals do not exceed balance
    IF :NEW.transaction_type = 'WITHDRAWAL' THEN
        SELECT balance INTO v_balance
        FROM accounts
        WHERE account_id = :NEW.account_id
        FOR UPDATE;
        
        IF :NEW.amount > v_balance THEN
            RAISE_APPLICATION_ERROR(-20002, 'Insufficient funds for withdrawal.');
        END IF;
    END IF;
END;
/
These triggers ensure that:

The LastModified column of the Customers table is updated to the current date whenever a customer's record is updated.
An audit log is maintained for all transactions by inserting a record into the AuditLog table whenever a transaction is inserted into the Transactions table.
Business rules are enforced on deposits and withdrawals, ensuring that deposits are positive and withdrawals do not exceed the account balance before inserting a record into the Transactions table.
Exercise 6: Cursors
Scenario 1: Generate Monthly Statements
DECLARE
    CURSOR transaction_cursor IS
        SELECT customer_id, transaction_date, transaction_type, amount
        FROM transactions
        WHERE transaction_date BETWEEN TRUNC(SYSDATE, 'MM') AND LAST_DAY(SYSDATE);
    
    v_customer_id transactions.customer_id%TYPE;
    v_transaction_date transactions.transaction_date%TYPE;
    v_transaction_type transactions.transaction_type%TYPE;
    v_amount transactions.amount%TYPE;
    v_current_customer_id transactions.customer_id%TYPE := NULL;
    v_statement VARCHAR2(4000);
BEGIN
    OPEN transaction_cursor;
    LOOP
        FETCH transaction_cursor INTO v_customer_id, v_transaction_date, v_transaction_type, v_amount;
        EXIT WHEN transaction_cursor%NOTFOUND;
        
        IF v_current_customer_id IS NULL OR v_current_customer_id != v_customer_id THEN
            IF v_current_customer_id IS NOT NULL THEN
                DBMS_OUTPUT.PUT_LINE(v_statement);
                DBMS_OUTPUT.PUT_LINE('----------------------------------------');
            END IF;
            v_current_customer_id := v_customer_id;
            v_statement := 'Monthly Statement for Customer ID: ' || v_customer_id || CHR(10) ||
                           '----------------------------------------' || CHR(10);
        END IF;
        
        v_statement := v_statement || v_transaction_date || ' ' || v_transaction_type || ' ' || v_amount || CHR(10);
    END LOOP;
    
    IF v_current_customer_id IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE(v_statement);
        DBMS_OUTPUT.PUT_LINE('----------------------------------------');
    END IF;
    
    CLOSE transaction_cursor;
END;
/
Scenario 2: Apply Annual Fee

DECLARE
    CURSOR account_cursor IS
        SELECT account_id, balance
        FROM accounts;
    
    v_account_id accounts.account_id%TYPE;
    v_balance accounts.balance%TYPE;
    v_annual_fee CONSTANT NUMBER := 50;  -- Assume an annual fee of $50
BEGIN
    OPEN account_cursor;
    LOOP
        FETCH account_cursor INTO v_account_id, v_balance;
        EXIT WHEN account_cursor%NOTFOUND;
        
        -- Deduct the annual fee from the account balance
        UPDATE accounts
        SET balance = balance - v_annual_fee
        WHERE account_id = v_account_id;
    END LOOP;
    
    CLOSE account_cursor;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error applying annual fee: ' || SQLERRM);
END;
/
Scenario 3: Update Loan Interest Rates
DECLARE
    CURSOR loan_cursor IS
        SELECT loan_id, interest_rate
        FROM loans;
    
    v_loan_id loans.loan_id%TYPE;
    v_interest_rate loans.interest_rate%TYPE;
    v_new_interest_rate loans.interest_rate%TYPE;
BEGIN
    OPEN loan_cursor;
    LOOP
        FETCH loan_cursor INTO v_loan_id, v_interest_rate;
        EXIT WHEN loan_cursor%NOTFOUND;
        
        -- Calculate the new interest rate based on the policy
        -- For example, increasing interest rate by 0.5%
        v_new_interest_rate := v_interest_rate + 0.5;
        
        -- Update the loan with the new interest rate
        UPDATE loans
        SET interest_rate = v_new_interest_rate
        WHERE loan_id = v_loan_id;
    END LOOP;
    
    CLOSE loan_cursor;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error updating loan interest rates: ' || SQLERRM);
END;
/
These PL/SQL blocks use explicit cursors to:

Retrieve and print all transactions for the current month, generating monthly statements for each customer.
Deduct an annual maintenance fee from the balance of all accounts.
Fetch all loans and update their interest rates based on a new policy. Each block includes error handling to manage any exceptions that may occur during execution.

Exercise 7: Packages
Scenario 1: Customer Management Package
CREATE OR REPLACE PACKAGE CustomerManagement AS
    PROCEDURE AddNewCustomer(p_customer_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER);
    PROCEDURE UpdateCustomerDetails(p_customer_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER);
    FUNCTION GetCustomerBalance(p_customer_id NUMBER) RETURN NUMBER;
END CustomerManagement;
/

CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
    PROCEDURE AddNewCustomer(p_customer_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER) IS
    BEGIN
        INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
        VALUES (p_customer_id, p_name, p_dob, p_balance, SYSDATE);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error adding new customer: ' || SQLERRM);
    END AddNewCustomer;

    PROCEDURE UpdateCustomerDetails(p_customer_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER) IS
    BEGIN
        UPDATE Customers
        SET Name = p_name, DOB = p_dob, Balance = p_balance, LastModified = SYSDATE
        WHERE CustomerID = p_customer_id;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error updating customer details: ' || SQLERRM);
    END UpdateCustomerDetails;

    FUNCTION GetCustomerBalance(p_customer_id NUMBER) RETURN NUMBER IS
        v_balance NUMBER;
    BEGIN
        SELECT Balance INTO v_balance
        FROM Customers
        WHERE CustomerID = p_customer_id;
        RETURN v_balance;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error retrieving customer balance: ' || SQLERRM);
            RETURN NULL;
    END GetCustomerBalance;
END CustomerManagement;
/

Scenario 2: Employee Management Package
CREATE OR REPLACE PACKAGE EmployeeManagement AS
    PROCEDURE HireEmployee(p_employee_id NUMBER, p_name VARCHAR2, p_position VARCHAR2, p_salary NUMBER, p_department VARCHAR2, p_hire_date DATE);
    PROCEDURE UpdateEmployeeDetails(p_employee_id NUMBER, p_name VARCHAR2, p_position VARCHAR2, p_salary NUMBER, p_department VARCHAR2);
    FUNCTION CalculateAnnualSalary(p_employee_id NUMBER) RETURN NUMBER;
END EmployeeManagement;
/

CREATE OR REPLACE PACKAGE BODY EmployeeManagement AS
    PROCEDURE HireEmployee(p_employee_id NUMBER, p_name VARCHAR2, p_position VARCHAR2, p_salary NUMBER, p_department VARCHAR2, p_hire_date DATE) IS
    BEGIN
        INSERT INTO Employees (EmployeeID, Name, Position, Salary, Department, HireDate)
        VALUES (p_employee_id, p_name, p_position, p_salary, p_department, p_hire_date);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error hiring new employee: ' || SQLERRM);
    END HireEmployee;

    PROCEDURE UpdateEmployeeDetails(p_employee_id NUMBER, p_name VARCHAR2, p_position VARCHAR2, p_salary NUMBER, p_department VARCHAR2) IS
    BEGIN
        UPDATE Employees
        SET Name = p_name, Position = p_position, Salary = p_salary, Department = p_department
        WHERE EmployeeID = p_employee_id;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error updating employee details: ' || SQLERRM);
    END UpdateEmployeeDetails;

    FUNCTION CalculateAnnualSalary(p_employee_id NUMBER) RETURN NUMBER IS
        v_salary NUMBER;
    BEGIN
        SELECT Salary INTO v_salary
        FROM Employees
        WHERE EmployeeID = p_employee_id;
        RETURN v_salary * 12;  -- Assuming monthly salary
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error calculating annual salary: ' || SQLERRM);
            RETURN NULL;
    END CalculateAnnualSalary;
END EmployeeManagement;
/
Scenario 3: Account Operations Package

CREATE OR REPLACE PACKAGE AccountOperations AS
    PROCEDURE OpenAccount(p_account_id NUMBER, p_customer_id NUMBER, p_account_type VARCHAR2, p_balance NUMBER);
    PROCEDURE CloseAccount(p_account_id NUMBER);
    FUNCTION GetTotalBalance(p_customer_id NUMBER) RETURN NUMBER;
END AccountOperations;
/

CREATE OR REPLACE PACKAGE BODY AccountOperations AS
    PROCEDURE OpenAccount(p_account_id NUMBER, p_customer_id NUMBER, p_account_type VARCHAR2, p_balance NUMBER) IS
    BEGIN
        INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance, LastModified)
        VALUES (p_account_id, p_customer_id, p_account_type, p_balance, SYSDATE);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error opening new account: ' || SQLERRM);
    END OpenAccount;

    PROCEDURE CloseAccount(p_account_id NUMBER) IS
    BEGIN
        DELETE FROM Accounts WHERE AccountID = p_account_id;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error closing account: ' || SQLERRM);
    END CloseAccount;

    FUNCTION GetTotalBalance(p_customer_id NUMBER) RETURN NUMBER IS
        v_total_balance NUMBER;
    BEGIN
        SELECT SUM(Balance) INTO v_total_balance
        FROM Accounts
        WHERE CustomerID = p_customer_id;
        RETURN v_total_balance;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error calculating total balance: ' || SQLERRM);
            RETURN NULL;
    END GetTotalBalance;
END AccountOperations;
/
These packages group related procedures and functions, making the code modular and easier to manage. The CustomerManagement package handles customer-related operations, EmployeeManagement handles employee-related operations, and AccountOperations manages account-related operations. Each package includes error handling to manage exceptions that may occur during execution.

